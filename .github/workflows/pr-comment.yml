name: PR Test Results

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  test-and-comment:
    name: Test and Comment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Run tests with coverage
      id: test
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./... 2>&1 | tee test-output.txt
        echo "coverage=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}')" >> $GITHUB_OUTPUT
    
    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.txt -o coverage.html
    
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const coverage = '${{ steps.test.outputs.coverage }}';
          const body = `## Test Results

          âœ… All tests passed!
          
          **Coverage:** ${coverage}
          
          <details>
          <summary>Detailed test output</summary>
          
          \`\`\`
          ${require('fs').readFileSync('test-output.txt', 'utf8').slice(-3000)}
          \`\`\`
          </details>`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('## Test Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }